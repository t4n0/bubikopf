#include "bitboard/fen_conversion.h"
#include "bitboard/generate_moves.h"
#include "search/traverse_all_leaves.h"

#include <gtest/gtest.h>

#include <chrono>
#include <iostream>

namespace Chess
{

namespace
{

using TraverseAllLeavesTestParameter = std::tuple<std::size_t, std::string, long long>;

class TraverseAllLeavesTestFixture : public testing::TestWithParam<TraverseAllLeavesTestParameter>
{
  public:
    std::size_t GetDepth() { return std::get<0>(GetParam()); }
    std::string GetFen() { return std::get<1>(GetParam()); }
    long long GetExpectedNumberOfLeaves() { return std::get<2>(GetParam()); }
};

TEST_P(TraverseAllLeavesTestFixture, GivenDepth_ExpectCorrectNumberOfEvaluations)
{
    // Setup
    Position position = PositionFromFen(GetFen());
    MoveStack move_stack{};
    Statistic stats{};
    const Chess::AbortCondition abort_condition{GetDepth()};

    // Call
    std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now();
    TraverseAllLeaves<GenerateAllPseudoLegalMoves>(position, move_stack.begin(), stats, abort_condition);
    std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();

    // Expect
    EXPECT_EQ(GetExpectedNumberOfLeaves(), stats.number_of_evaluations) << ToString(move_stack);
    std::cout << "Time spent = " << std::chrono::duration_cast<std::chrono::milliseconds>(end - begin).count() << "[ms]"
              << std::endl;
}

// Numbers taken from https://www.chessprogramming.org/Perft_Results
const char* const pos2_fen = "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1";
const char* const pos3_fen = "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1";
const char* const pos4_fen = "r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1";
const char* const pos5_fen = "rnbq1k1r/pp1Pbppp/2p5/8/2B5/8/PPP1NnPP/RNBQK2R w KQ - 1 8";
const char* const pos6_fen = "r4rk1/1pp1qppp/p1np1n2/2b1p1B1/2B1P1b1/P1NP1N2/1PP1QPPP/R4RK1 w - - 0 10";

const TraverseAllLeavesTestParameter pos1_ply4{4, kStandardStartingPosition, 197281};
const TraverseAllLeavesTestParameter pos2_ply4{4, pos2_fen, 4085603};
const TraverseAllLeavesTestParameter pos3_ply4{4, pos3_fen, 43238};
const TraverseAllLeavesTestParameter pos4_ply4{4, pos4_fen, 422333};
const TraverseAllLeavesTestParameter pos5_ply4{4, pos5_fen, 2103487};
const TraverseAllLeavesTestParameter pos6_ply4{4, pos6_fen, 3894594};

// Numbers generated by reference implementation BBPerft
const char* const pos7_fen = "8/8/8/8/8/8/2k5/R3K2R w KQ - 0 1";      // king prevents castling
const char* const pos8_fen = "8/p5pp/3k4/8/3K4/8/PP4PP/8 w - - 0 1";  // king face off

const TraverseAllLeavesTestParameter pos7_ply4{4, pos7_fen, 12181};
const TraverseAllLeavesTestParameter pos8_ply4{4, pos8_fen, 26111};

INSTANTIATE_TEST_SUITE_P(
    FromPositionDepth4,
    TraverseAllLeavesTestFixture,
    testing::Values(pos1_ply4, pos2_ply4, pos3_ply4, pos4_ply4, pos5_ply4, pos6_ply4, pos7_ply4, pos8_ply4));

}  // namespace
}  // namespace Chess
